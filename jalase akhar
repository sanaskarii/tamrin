{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4861d1d6-49cb-40fc-b4a4-cec746c45adc",
   "metadata": {},
   "outputs": [],
   "source": [
    "class min_Heap:\n",
    "    def __init__(self):\n",
    "        self.heap = []\n",
    "\n",
    "    def insert(self, val):\n",
    "        self.heap.append(val)\n",
    "        self.heapify_up(len(self.heap) - 1)\n",
    "\n",
    "    def get_min(self):\n",
    "        if self.heap:\n",
    "            return self.heap[0]\n",
    "        return None\n",
    "\n",
    "    def del_min(self):\n",
    "        if len(self.heap) > 1:\n",
    "            self._swap(0, len(self.heap) - 1)\n",
    "            min_val = self.heap.pop()\n",
    "            self.heapify_down(0)\n",
    "            \n",
    "        elif self.heap:\n",
    "            min_val = self.heap.pop()\n",
    "            \n",
    "        else:\n",
    "            min_val = None\n",
    "        return min_val\n",
    "\n",
    "    def heapify_up(self, index):\n",
    "        parent_index = (index - 1) // 2\n",
    "        if index > 0 and self.heap[index] < self.heap[parent_index]:\n",
    "            self._swap(index, parent_index)\n",
    "            self.heapify_up(parent_index)\n",
    "\n",
    "    def heapify_down(self, index):\n",
    "        smallest = index\n",
    "        left = 2 * index + 1\n",
    "        right = 2 * index + 2\n",
    "\n",
    "        if left < len(self.heap) and self.heap[left] < self.heap[smallest]:\n",
    "            smallest = left\n",
    "\n",
    "        if right < len(self.heap) and self.heap[right] < self.heap[smallest]:\n",
    "            smallest = right\n",
    "\n",
    "        if smallest != index:\n",
    "            self._swap(index, smallest)\n",
    "            self.heapify_down(smallest)\n",
    "\n",
    "    def _swap(self, i, j):\n",
    "        self.heap[i], self.heap[j] = self.heap[j], self.heap[i]\n",
    "\n",
    "def heap_sort(list_of_numbers):\n",
    "    heap = min_Heap()\n",
    "    sorted_list = []\n",
    "\n",
    "    for number in list_of_numbers:\n",
    "        heap.insert(number)\n",
    "\n",
    "    while heap.heap:\n",
    "        sorted_list.append(heap.del_min())\n",
    "\n",
    "    return sorted_list\n",
    "\n",
    "from src.tests.tester import tester\n",
    "tester(\"heap sort\", heap_sort)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ccf8be93-23ce-4aa2-af0c-a416029aa208",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
